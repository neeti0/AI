import copy
import random

class EightPuzzle:
    def __init__(self, initial, goal):
        self.initial = initial
        self.goal = goal

    def get_blank_space(self, state):
        for i in range(3):
            for j in range(3):
                if state[i][j] == 0:
                    return (i, j)

    def get_heuristic(self, state):
        cnt = 0
        for i in range(3):
            for j in range(3):
                if state[i][j] != self.goal[i][j]:
                    cnt += 1
        return cnt

    def get_next_move(self, state):
        blank = self.get_blank_space(state)
        moves = []

        for delta in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
            new_i, new_j = blank[0] + delta[0], blank[1] + delta[1]
            if 0 <= new_i < 3 and 0 <= new_j < 3:
                new_state = copy.deepcopy(state)
                new_state[blank[0]][blank[1]] = new_state[new_i][new_j]
                new_state[new_i][new_j] = 0
                moves.append(new_state)

        return moves

class HillClimbSearch:
    def __init__(self, puzzle, max_steps=1000):
        self.puzzle = puzzle
        self.max_steps = max_steps

    def search(self):
        curr = self.puzzle.initial
        path = [curr]

        steps = 0
        while steps < self.max_steps:
            h = self.puzzle.get_heuristic(curr)
            if h == 0:  # goal state
                return path

            moves = self.puzzle.get_next_move(curr)
            h_next = [self.puzzle.get_heuristic(move) for move in moves]

            if min(h_next) >= h:
                print('Reached local maxima or plateau')
                return path

            curr = random.choice([move for move, h_move in zip(moves, h_next) if h_move < h])
            path.append(curr)
            steps += 1

        print('Maximum steps reached')
        return path

def main():
    initial = [[2, 0, 3], [1, 8, 4], [7, 6, 5]]
    goal = [[1, 2, 3], [8, 0, 4], [7, 6, 5]]

    puzzle = EightPuzzle(initial, goal)
    hillClimb = HillClimbSearch(puzzle)

    path = hillClimb.search()

    print("Initial State:")
    for row in initial:
        print(row)
    print("\nGoal State:")
    for row in goal:
        print(row)
    print("\nPath:")
    for state in path:
        for row in state:
            print(row)
        print()

if __name__ == "__main__":
    main()
