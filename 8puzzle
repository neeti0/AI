from collections import deque

class Puzzle:
    # Your existing Puzzle class code here...

    def __init__(self, board):
        self.board = board
        self.goal = [1, 2, 3, 4, 5, 6, 7, 8, 0]

    def printState(self):
    print(f"{self.board[0]} {self.board[1]} {self.board[2]}\n{self.board[3]} {self.board[4]} {self.board[5]}\n{self.board[6]} {self.board[7]} {self.board[8]}")

  def isGoal(self):
    return self.board == self.goal
  
  def getEmptyTile(self, board):
    for i in range(9):
      if board[i] == 0:
        return i
      
  def moveUp(self):
    empty_tile = self.getEmptyTile(self.board)
    if empty_tile < 3:
      return None
    else:
      new_board = self.board.copy()
      new_board[empty_tile] = new_board[empty_tile-3]
      new_board[empty_tile-3] = 0
      return new_board
    
  def moveDown(self):
    empty_tile = self.getEmptyTile(self.board)
    if empty_tile > 5:
      return None
    else:
      new_board = self.board.copy()
      new_board[empty_tile] = new_board[empty_tile+3]
      new_board[empty_tile+3] = 0
      return new_board
    
  def moveLeft(self):
    empty_tile = self.getEmptyTile(self.board)
    if empty_tile % 3 == 0:
      return None
    else:
      new_board = self.board.copy()
      new_board[empty_tile] = new_board[empty_tile-1]
      new_board[empty_tile-1] = 0
      return new_board
    
  def moveRight(self):
    empty_tile = self.getEmptyTile(self.board)
    if empty_tile % 3 == 2:
      return None
    else:
      new_board = self.board.copy()
      new_board[empty_tile] = new_board[empty_tile+1]
      new_board[empty_tile+1] = 0
      return new_board
    
  def move(self, direction):
    if direction == 1:
      return self.moveUp()
    elif direction == 2:
      return self.moveDown()
    elif direction == 3:
      return self.moveLeft()
    elif direction == 4:
      return self.moveRight()

    def solve(self):
        queue = deque([(self.board, [])])
        visited = set()

        while queue:
            state, path = queue.popleft()
            if state == self.goal:
                return path
            if tuple(state) in visited:
                continue
            visited.add(tuple(state))

            next_moves = [self.move(direction) for direction in range(1, 5)]
            next_states = [(move, path + [move]) for move in next_moves if move is not None]
            queue.extend(next_states)

        return None  # No solution found

def main():
    # Example usage:
    board = [1, 2, 3, 4, 5, 6, 7, 0, 8]  # Initial board configuration
    puzzle = Puzzle(board)
    solution = puzzle.solve()

    if solution:
        print("Solution Path:")
        for step, state in enumerate(solution, 1):
            print(f"Step {step}:")
            Puzzle(state).printState()
    else:
        print("No solution found.")

if __name__ == "__main__":
    main()
