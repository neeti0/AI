import copy

class EightPuzzle:
    def __init__(self, initial_state, goal_state):
        self.initial_state = initial_state
        self.goal_state = goal_state

    def get_blank_space(self, state):
        for i in range(3):
            for j in range(3):
                if state[i][j] == 0:
                    return (i, j)

    def get_next_moves(self, state):
        blank = self.get_blank_space(state)
        moves = []

        for delta in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
            new_i, new_j = blank[0] + delta[0], blank[1] + delta[1]
            if 0 <= new_i < 3 and 0 <= new_j < 3:
                new_state = copy.deepcopy(state)
                new_state[blank[0]][blank[1]] = new_state[new_i][new_j]
                new_state[new_i][new_j] = 0
                moves.append(new_state)

        return moves

class DepthFirstSearch:
    def __init__(self, puzzle):
        self.puzzle = puzzle
        self.visited = set()
        self.path = []

    def search(self, state, depth):
        if depth == 0:
            return False
        if state == self.puzzle.goal_state:
            self.path.append(state)
            return True

        self.visited.add(str(state))

        for next_state in self.puzzle.get_next_moves(state):
            if str(next_state) not in self.visited:
                self.path.append(next_state)
                if self.search(next_state, depth - 1):
                    return True
                self.path.pop()

        return False

    def iterative_deepening_search(self):
        depth = 1
        while not self.search(self.puzzle.initial_state, depth):
            self.visited.clear()
            depth += 1
            self.path.clear()

        return self.path

def main():
    initial = [[2, 0, 3], [1, 8, 4], [7, 6, 5]]
    goal = [[1, 2, 3], [8, 0, 4], [7, 6, 5]]

    puzzle = EightPuzzle(initial, goal)
    dfs = DepthFirstSearch(puzzle)

    path = dfs.iterative_deepening_search()

    print("Initial State:")
    for row in initial:
        print(row)
    print("\nGoal State:")
    for row in goal:
        print(row)
    print("\nPath:")
    for state in path:
        for row in state:
            print(row)
        print()

if __name__ == "__main__":
    main()
